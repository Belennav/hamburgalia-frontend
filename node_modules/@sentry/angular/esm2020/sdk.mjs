import { VERSION } from '@angular/core';
import { breadcrumbsIntegration, globalHandlersIntegration, httpContextIntegration, linkedErrorsIntegration, } from '@sentry/browser';
import { init as browserInit, setContext } from '@sentry/browser';
import { applySdkMetadata, dedupeIntegration, functionToStringIntegration, inboundFiltersIntegration, } from '@sentry/core';
import { logger } from '@sentry/core';
import { IS_DEBUG_BUILD } from './flags';
/**
 * Get the default integrations for the Angular SDK.
 */
export function getDefaultIntegrations() {
    // Don't include the BrowserApiErrors integration as it interferes with the Angular SDK's `ErrorHandler`:
    // BrowserApiErrors would catch certain errors before they reach the `ErrorHandler` and
    // thus provide a lower fidelity error than what `SentryErrorHandler`
    // (see errorhandler.ts) would provide.
    //
    // see:
    //  - https://github.com/getsentry/sentry-javascript/issues/5417#issuecomment-1453407097
    //  - https://github.com/getsentry/sentry-javascript/issues/2744
    return [
        inboundFiltersIntegration(),
        functionToStringIntegration(),
        breadcrumbsIntegration(),
        globalHandlersIntegration(),
        linkedErrorsIntegration(),
        dedupeIntegration(),
        httpContextIntegration(),
    ];
}
/**
 * Inits the Angular SDK
 */
export function init(options) {
    const opts = {
        defaultIntegrations: getDefaultIntegrations(),
        ...options,
    };
    applySdkMetadata(opts, 'angular');
    checkAndSetAngularVersion();
    return browserInit(opts);
}
function checkAndSetAngularVersion() {
    const ANGULAR_MINIMUM_VERSION = 14;
    const angularVersion = VERSION && VERSION.major ? parseInt(VERSION.major, 10) : undefined;
    if (angularVersion) {
        if (angularVersion < ANGULAR_MINIMUM_VERSION) {
            IS_DEBUG_BUILD &&
                logger.warn(`This Sentry SDK does not officially support Angular ${angularVersion}.`, `This SDK only supports Angular ${ANGULAR_MINIMUM_VERSION} and above.`, "If you're using lower Angular versions, check the Angular Version Compatibility table in our docs: https://docs.sentry.io/platforms/javascript/guides/angular/#angular-version-compatibility.", 'Otherwise, please consider upgrading your Angular version.');
        }
        setContext('angular', { version: angularVersion });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Nkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhDLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIseUJBQXlCLEVBQ3pCLHNCQUFzQixFQUN0Qix1QkFBdUIsR0FDeEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsSUFBSSxJQUFJLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQiwyQkFBMkIsRUFDM0IseUJBQXlCLEdBQzFCLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFHdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV6Qzs7R0FFRztBQUNILE1BQU0sVUFBVSxzQkFBc0I7SUFDcEMseUdBQXlHO0lBQ3pHLHVGQUF1RjtJQUN2RixxRUFBcUU7SUFDckUsdUNBQXVDO0lBQ3ZDLEVBQUU7SUFDRixPQUFPO0lBQ1Asd0ZBQXdGO0lBQ3hGLGdFQUFnRTtJQUNoRSxPQUFPO1FBQ0wseUJBQXlCLEVBQUU7UUFDM0IsMkJBQTJCLEVBQUU7UUFDN0Isc0JBQXNCLEVBQUU7UUFDeEIseUJBQXlCLEVBQUU7UUFDM0IsdUJBQXVCLEVBQUU7UUFDekIsaUJBQWlCLEVBQUU7UUFDbkIsc0JBQXNCLEVBQUU7S0FDekIsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxJQUFJLENBQUMsT0FBdUI7SUFDMUMsTUFBTSxJQUFJLEdBQUc7UUFDWCxtQkFBbUIsRUFBRSxzQkFBc0IsRUFBRTtRQUM3QyxHQUFHLE9BQU87S0FDWCxDQUFDO0lBRUYsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWxDLHlCQUF5QixFQUFFLENBQUM7SUFDNUIsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELFNBQVMseUJBQXlCO0lBQ2hDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0lBRW5DLE1BQU0sY0FBYyxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRTFGLElBQUksY0FBYyxFQUFFO1FBQ2xCLElBQUksY0FBYyxHQUFHLHVCQUF1QixFQUFFO1lBQzVDLGNBQWM7Z0JBQ1osTUFBTSxDQUFDLElBQUksQ0FDVCx1REFBdUQsY0FBYyxHQUFHLEVBQ3hFLGtDQUFrQyx1QkFBdUIsYUFBYSxFQUN0RSwrTEFBK0wsRUFDL0wsNERBQTRELENBQzdELENBQUM7U0FDTDtRQUNELFVBQVUsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztLQUNwRDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWRVJTSU9OIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEJyb3dzZXJPcHRpb25zIH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbmltcG9ydCB7XG4gIGJyZWFkY3J1bWJzSW50ZWdyYXRpb24sXG4gIGdsb2JhbEhhbmRsZXJzSW50ZWdyYXRpb24sXG4gIGh0dHBDb250ZXh0SW50ZWdyYXRpb24sXG4gIGxpbmtlZEVycm9yc0ludGVncmF0aW9uLFxufSBmcm9tICdAc2VudHJ5L2Jyb3dzZXInO1xuaW1wb3J0IHsgaW5pdCBhcyBicm93c2VySW5pdCwgc2V0Q29udGV4dCB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG5pbXBvcnQge1xuICBhcHBseVNka01ldGFkYXRhLFxuICBkZWR1cGVJbnRlZ3JhdGlvbixcbiAgZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uLFxuICBpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uLFxufSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS9jb3JlJztcbmltcG9ydCB0eXBlIHsgQ2xpZW50LCBJbnRlZ3JhdGlvbiB9IGZyb20gJ0BzZW50cnkvdHlwZXMnO1xuXG5pbXBvcnQgeyBJU19ERUJVR19CVUlMRCB9IGZyb20gJy4vZmxhZ3MnO1xuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCBpbnRlZ3JhdGlvbnMgZm9yIHRoZSBBbmd1bGFyIFNESy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRJbnRlZ3JhdGlvbnMoKTogSW50ZWdyYXRpb25bXSB7XG4gIC8vIERvbid0IGluY2x1ZGUgdGhlIEJyb3dzZXJBcGlFcnJvcnMgaW50ZWdyYXRpb24gYXMgaXQgaW50ZXJmZXJlcyB3aXRoIHRoZSBBbmd1bGFyIFNESydzIGBFcnJvckhhbmRsZXJgOlxuICAvLyBCcm93c2VyQXBpRXJyb3JzIHdvdWxkIGNhdGNoIGNlcnRhaW4gZXJyb3JzIGJlZm9yZSB0aGV5IHJlYWNoIHRoZSBgRXJyb3JIYW5kbGVyYCBhbmRcbiAgLy8gdGh1cyBwcm92aWRlIGEgbG93ZXIgZmlkZWxpdHkgZXJyb3IgdGhhbiB3aGF0IGBTZW50cnlFcnJvckhhbmRsZXJgXG4gIC8vIChzZWUgZXJyb3JoYW5kbGVyLnRzKSB3b3VsZCBwcm92aWRlLlxuICAvL1xuICAvLyBzZWU6XG4gIC8vICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzU0MTcjaXNzdWVjb21tZW50LTE0NTM0MDcwOTdcbiAgLy8gIC0gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvMjc0NFxuICByZXR1cm4gW1xuICAgIGluYm91bmRGaWx0ZXJzSW50ZWdyYXRpb24oKSxcbiAgICBmdW5jdGlvblRvU3RyaW5nSW50ZWdyYXRpb24oKSxcbiAgICBicmVhZGNydW1ic0ludGVncmF0aW9uKCksXG4gICAgZ2xvYmFsSGFuZGxlcnNJbnRlZ3JhdGlvbigpLFxuICAgIGxpbmtlZEVycm9yc0ludGVncmF0aW9uKCksXG4gICAgZGVkdXBlSW50ZWdyYXRpb24oKSxcbiAgICBodHRwQ29udGV4dEludGVncmF0aW9uKCksXG4gIF07XG59XG5cbi8qKlxuICogSW5pdHMgdGhlIEFuZ3VsYXIgU0RLXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG9wdGlvbnM6IEJyb3dzZXJPcHRpb25zKTogQ2xpZW50IHwgdW5kZWZpbmVkIHtcbiAgY29uc3Qgb3B0cyA9IHtcbiAgICBkZWZhdWx0SW50ZWdyYXRpb25zOiBnZXREZWZhdWx0SW50ZWdyYXRpb25zKCksXG4gICAgLi4ub3B0aW9ucyxcbiAgfTtcblxuICBhcHBseVNka01ldGFkYXRhKG9wdHMsICdhbmd1bGFyJyk7XG5cbiAgY2hlY2tBbmRTZXRBbmd1bGFyVmVyc2lvbigpO1xuICByZXR1cm4gYnJvd3NlckluaXQob3B0cyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQW5kU2V0QW5ndWxhclZlcnNpb24oKTogdm9pZCB7XG4gIGNvbnN0IEFOR1VMQVJfTUlOSU1VTV9WRVJTSU9OID0gMTQ7XG5cbiAgY29uc3QgYW5ndWxhclZlcnNpb24gPSBWRVJTSU9OICYmIFZFUlNJT04ubWFqb3IgPyBwYXJzZUludChWRVJTSU9OLm1ham9yLCAxMCkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGFuZ3VsYXJWZXJzaW9uKSB7XG4gICAgaWYgKGFuZ3VsYXJWZXJzaW9uIDwgQU5HVUxBUl9NSU5JTVVNX1ZFUlNJT04pIHtcbiAgICAgIElTX0RFQlVHX0JVSUxEICYmXG4gICAgICAgIGxvZ2dlci53YXJuKFxuICAgICAgICAgIGBUaGlzIFNlbnRyeSBTREsgZG9lcyBub3Qgb2ZmaWNpYWxseSBzdXBwb3J0IEFuZ3VsYXIgJHthbmd1bGFyVmVyc2lvbn0uYCxcbiAgICAgICAgICBgVGhpcyBTREsgb25seSBzdXBwb3J0cyBBbmd1bGFyICR7QU5HVUxBUl9NSU5JTVVNX1ZFUlNJT059IGFuZCBhYm92ZS5gLFxuICAgICAgICAgIFwiSWYgeW91J3JlIHVzaW5nIGxvd2VyIEFuZ3VsYXIgdmVyc2lvbnMsIGNoZWNrIHRoZSBBbmd1bGFyIFZlcnNpb24gQ29tcGF0aWJpbGl0eSB0YWJsZSBpbiBvdXIgZG9jczogaHR0cHM6Ly9kb2NzLnNlbnRyeS5pby9wbGF0Zm9ybXMvamF2YXNjcmlwdC9ndWlkZXMvYW5ndWxhci8jYW5ndWxhci12ZXJzaW9uLWNvbXBhdGliaWxpdHkuXCIsXG4gICAgICAgICAgJ090aGVyd2lzZSwgcGxlYXNlIGNvbnNpZGVyIHVwZ3JhZGluZyB5b3VyIEFuZ3VsYXIgdmVyc2lvbi4nLFxuICAgICAgICApO1xuICAgIH1cbiAgICBzZXRDb250ZXh0KCdhbmd1bGFyJywgeyB2ZXJzaW9uOiBhbmd1bGFyVmVyc2lvbiB9KTtcbiAgfVxufVxuIl19